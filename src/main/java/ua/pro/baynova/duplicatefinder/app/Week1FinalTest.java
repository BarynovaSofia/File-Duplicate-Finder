package ua.pro.baynova.duplicatefinder.app;

import ua.pro.baynova.duplicatefinder.hash.HashCalculator;
import ua.pro.baynova.duplicatefinder.index.SimpleFileIndex;
import ua.pro.baynova.duplicatefinder.model.FileInfo;
import ua.pro.baynova.duplicatefinder.scanner.FileScanner;

import java.io.File;
import java.time.LocalDateTime;
import java.util.List;

public class Week1FinalTest {
    public static void main(String[] args) {
        System.out.println("=== –ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢ –ù–ï–î–ï–õ–ò 1 ===");
        System.out.println("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤\n");

        try {
            createTestFiles();
            runFullDuplicateSearch(".");

            System.out.println("\nüéâ –ù–ï–î–ï–õ–Ø 1 –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!");
            System.out.println("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ");

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ç–µ—Å—Ç–µ: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void createTestFiles(){
        System.out.println("--- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---");

        try {
            File testDir = new File("test_duplicates");
            if (!testDir.exists()) {
                testDir.mkdir();
            }

            String duplicateContent = "This is duplicate content for testing duplicate detection";

            createTestFile(new File(testDir, "original.txt"), duplicateContent);
            createTestFile(new File(testDir, "copy1.txt"), duplicateContent);
            createTestFile(new File(testDir, "copy2.txt"), duplicateContent);

            createTestFile(new File(testDir, "unique1.txt"), "Unique content 1");
            createTestFile(new File(testDir, "unique2.txt"), "Unique content 2");

            String anotherDuplicate = "Another set of duplicate files for comprehensive testing";
            createTestFile(new File(testDir, "another1.txt"), anotherDuplicate);
            createTestFile(new File(testDir, "another2.txt"), anotherDuplicate);

            System.out.println("–°–æ–∑–¥–∞–Ω–æ 7 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: " + testDir.getAbsolutePath());
            System.out.println("- 3 —Ñ–∞–π–ª–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (–≥—Ä—É–ø–ø–∞ 1)");
            System.out.println("- 2 —Ñ–∞–π–ª–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (–≥—Ä—É–ø–ø–∞ 2)");
            System.out.println("- 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞");
            System.out.println();

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: " + e.getMessage());
        }
    }

    private static void createTestFile(File file, String content) throws Exception {
        try (java.io.FileWriter writer = new java.io.FileWriter(file)) {
            writer.write(content);
        }
        file.deleteOnExit();
    }

    private static void runFullDuplicateSearch(String directoryPath) throws Exception {
        System.out.println("--- –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ü–û–ò–°–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í ---");
        System.out.println("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: " + new File(directoryPath).getAbsolutePath());
        System.out.println();

        long startTime = System.currentTimeMillis();

        System.out.println("–®–ê–ì 1: –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã...");
        FileScanner scanner = new FileScanner(
                FileScanner.Filters.byExtensions(".txt", ".java", ".xml"),
                false,
                10
        );

        List<FileScanner.FileTask> fileTasks = scanner.scanDirectory(directoryPath);
        System.out.println("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + fileTasks.size());
        System.out.println();

        System.out.println("–®–ê–ì 2: –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à–∏ —Ñ–∞–π–ª–æ–≤...");
        HashCalculator hashCalculator = new HashCalculator();
        SimpleFileIndex index = new SimpleFileIndex();

        int processed = 0;
        int errors = 0;

        for (FileScanner.FileTask task : fileTasks) {
            try {
                String hash = hashCalculator.calculateHash(task.getPath());

                FileInfo fileInfo = new FileInfo(
                        task.getPath(),
                        hash,
                        task.getSize(),
                        task.getLastModified(),
                        LocalDateTime.now()
                );

                index.addOrUpdate(fileInfo);
                processed++;

                if (processed % 10 == 0) {
                    System.out.println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " + processed + " —Ñ–∞–π–ª–æ–≤");
                }

            } catch (Exception e) {
                errors++;
                System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ " + task.getPath() + ": " + e.getMessage());
            }
        }

        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: " + processed + ", –æ—à–∏–±–æ–∫: " + errors);
        System.out.println();

        System.out.println("–®–ê–ì 3: –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã...");
        List<List<FileInfo>> duplicateGroups = index.findDuplicates();

        if (duplicateGroups.isEmpty()) {
            System.out.println("–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        } else {
            System.out.println("–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: " + duplicateGroups.size());
            System.out.println();

            for (int i = 0; i < duplicateGroups.size(); i++) {
                List<FileInfo> group = duplicateGroups.get(i);
                System.out.printf("=== –ì–†–£–ü–ü–ê –î–£–ë–õ–ò–ö–ê–¢–û–í %d (%d —Ñ–∞–π–ª–æ–≤) ===%n", i + 1, group.size());

                for (FileInfo file : group) {
                    System.out.printf("  üìÑ %s%n", file.getFileName());
                    System.out.printf("      –ü—É—Ç—å: %s%n", file.getPath());
                    System.out.printf("      –†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç%n", file.getSize());
                    System.out.printf("      –•–µ—à: %s%n", file.getHash());
                    System.out.println();
                }
            }
        }

        System.out.println("--- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---");
        SimpleFileIndex.IndexStatistics stats = index.getStatistics();
        System.out.println(stats);

        long endTime = System.currentTimeMillis();
        double duration = (endTime - startTime) / 1000.0;

        System.out.println();
        System.out.printf("–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %.2f —Å–µ–∫—É–Ω–¥%n", duration);
        System.out.printf("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.0f —Ñ–∞–π–ª–æ–≤/—Å–µ–∫—É–Ω–¥—É%n", processed / Math.max(duration, 0.01));

        if (stats.getPotentialSavings() > 0) {
            System.out.println();
            System.out.println("üíæ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø –ú–ï–°–¢–ê:");
            System.out.println("–ú–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å: " + formatSize(stats.getPotentialSavings()));
            System.out.println("–≠—Ç–æ " + (100.0 * stats.getPotentialSavings() / stats.getTotalSize()));
        }
    }

    private static String formatSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1024 * 1024) return String.format("%.1f KB", bytes / 1024.0);
        if (bytes < 1024 * 1024 * 1024) return String.format("%.1f MB", bytes / (1024.0 * 1024));
        return String.format("%.1f GB", bytes / (1024.0 * 1024 * 1024));
    }
}
