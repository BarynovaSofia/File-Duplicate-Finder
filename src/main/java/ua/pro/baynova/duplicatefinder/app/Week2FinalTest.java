package ua.pro.baynova.duplicatefinder.app;

import ua.pro.baynova.duplicatefinder.concurrent.MultiThreadFileIndexer;

public class Week2FinalTest {

    public static void main(String[] args) {
        System.out.println("=== –ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢ –ù–ï–î–ï–õ–ò 2 ===");
        System.out.println("–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤");
        System.out.println();

        try {
            testMultiThreadVersion();

            compareWithSingleThread();

            System.out.println("\nüöÄ –ù–ï–î–ï–õ–Ø 2 –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!");
            System.out.println("–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void testMultiThreadVersion() throws Exception {
        System.out.println("--- –¢–µ—Å—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ---");

        int[] threadCounts = {1, 2, 4, Runtime.getRuntime().availableProcessors()};
        String testDirectory = ".";

        for (int threads : threadCounts) {
            System.out.printf("\n=== –¢–ï–°–¢ –° %d –ü–û–¢–û–ö–ê–ú–ò ===%n", threads);

            MultiThreadFileIndexer indexer = new MultiThreadFileIndexer(threads);
            long startTime = System.currentTimeMillis();

            MultiThreadFileIndexer.IndexingResult result = indexer.indexDirectory(testDirectory);

            long duration = System.currentTimeMillis() - startTime;

            System.out.printf("\n–†–ï–ó–£–õ–¨–¢–ê–¢ (%d –ø–æ—Ç–æ–∫–æ–≤):%n", threads);
            System.out.printf("  –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d%n", result.getProcessedCount());
            System.out.printf("  –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: %d%n", result.getDuplicateGroupsCount());
            System.out.printf("  –û–±—â–µ–µ –≤—Ä–µ–º—è: %.2f —Å–µ–∫%n", duration / 1000.0);
            System.out.printf("  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.1f —Ñ–∞–π–ª–æ–≤/—Å–µ–∫%n", result.getOverallPerformance());
            System.out.println("‚îÄ".repeat(50));
        }
    }

    private static void compareWithSingleThread() throws Exception {
        System.out.println("\n--- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---");
        System.out.println("–û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–∞—è vs –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞");

        String testDirectory = ".";

        System.out.println("\n–û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è:");
        MultiThreadFileIndexer singleThread = new MultiThreadFileIndexer(1);
        long startTime = System.currentTimeMillis();
        MultiThreadFileIndexer.IndexingResult singleResult = singleThread.indexDirectory(testDirectory);
        long singleTime = System.currentTimeMillis() - startTime;

        System.out.println("\n–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è:");
        int optimalThreads = Runtime.getRuntime().availableProcessors();
        MultiThreadFileIndexer multiThread = new MultiThreadFileIndexer(optimalThreads);
        startTime = System.currentTimeMillis();
        MultiThreadFileIndexer.IndexingResult multiResult = multiThread.indexDirectory(testDirectory);
        long multiTime = System.currentTimeMillis() - startTime;

        System.out.println("\n" + "=".repeat(60));
        System.out.println("–°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò");
        System.out.println("=".repeat(60));

        System.out.printf("–û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è:  %.2f —Å–µ–∫%n", singleTime / 1000.0);
        System.out.printf("–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: %.2f —Å–µ–∫ (%d –ø–æ—Ç–æ–∫–æ–≤)%n", multiTime / 1000.0, optimalThreads);

        if (singleTime > multiTime) {
            double speedup = (double) singleTime / multiTime;
            double efficiency = speedup / optimalThreads * 100;

            System.out.printf("–£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.2fx%n", speedup);
            System.out.printf("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %.1f%%%n", efficiency);

            if (speedup > 1.5) {
                System.out.println("‚úÖ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–µ—Ç –∑–∞–º–µ—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ!");
            } else {
                System.out.println("‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ");
            }
        } else {
            System.out.println("‚ö†Ô∏è –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ");
            System.out.println("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤");
        }

        System.out.println("\n–û–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é:");
        System.out.printf("  –§–∞–π–ª–æ–≤: %d vs %d%n",
                singleResult.getProcessedCount(), multiResult.getProcessedCount());
        System.out.printf("  –î—É–±–ª–∏–∫–∞—Ç–æ–≤: %d vs %d%n",
                singleResult.getDuplicateGroupsCount(), multiResult.getDuplicateGroupsCount());

        boolean resultsMatch = singleResult.getProcessedCount() == multiResult.getProcessedCount()
                && singleResult.getDuplicateGroupsCount() == multiResult.getDuplicateGroupsCount();

        if (resultsMatch) {
            System.out.println("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã - –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        } else {
            System.out.println("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º –∫–æ–¥–µ");
        }
    }
}
