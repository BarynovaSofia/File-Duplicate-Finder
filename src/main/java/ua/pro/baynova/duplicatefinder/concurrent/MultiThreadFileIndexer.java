package ua.pro.baynova.duplicatefinder.concurrent;

import ua.pro.baynova.duplicatefinder.concurrent.MultiThreadHashCalculator;
import ua.pro.baynova.duplicatefinder.index.SimpleFileIndex;
import ua.pro.baynova.duplicatefinder.model.FileInfo;
import ua.pro.baynova.duplicatefinder.scanner.FileScanner;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class MultiThreadFileIndexer {

    private final FileScanner fileScanner;
    private final MultiThreadHashCalculator hashCalculator;
    private final SimpleFileIndex fileIndex;
    private final int numberOfThreads;

    private String hashAlgorithm = "MD5";
    private boolean showProgress = true;

    public MultiThreadFileIndexer() {
        this(Runtime.getRuntime().availableProcessors());
    }

    public MultiThreadFileIndexer(int numberOfThreads) {
        this.numberOfThreads = numberOfThreads;
        this.fileScanner = new FileScanner();
        this.hashCalculator = new MultiThreadHashCalculator(numberOfThreads, hashAlgorithm);
        this.fileIndex = new SimpleFileIndex();

        System.out.println("=== MultiThreadFileIndexer ===");
        System.out.println("–ü–æ—Ç–æ–∫–æ–≤: " + numberOfThreads);
        System.out.println("–ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: " + hashAlgorithm);
        System.out.println("–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: " + (showProgress ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"));
    }

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     * @param directoryPath –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    public IndexingResult indexDirectory(String directoryPath) throws Exception {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("–ú–ù–û–ì–û–ü–û–¢–û–ß–ù–ê–Ø –ò–ù–î–ï–ö–°–ê–¶–ò–Ø: " + directoryPath);
        System.out.println("=".repeat(60));

        long totalStartTime = System.currentTimeMillis();
        IndexingResult result = new IndexingResult();

        try {
            executeScanningPhase(directoryPath, result);

            executeHashingPhase(result);

            executeIndexingPhase(result);

            result.totalDuration = System.currentTimeMillis() - totalStartTime;
            printFinalStatistics(result);

            return result;

        } catch (Exception e) {
            System.err.println("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: " + e.getMessage());
            throw e;
        }
    }

    private void executeScanningPhase(String directoryPath, IndexingResult result) throws Exception {
        System.out.println("\n--- –≠–¢–ê–ü 1: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ---");
        long phaseStart = System.currentTimeMillis();

        FileScanner scanner = new FileScanner(
                FileScanner.Filters.excludeHidden()
                        .and(FileScanner.Filters.minSize(1)),
                false,
                20
        );

        result.fileTasks = scanner.scanDirectory(directoryPath);
        result.scanningDuration = System.currentTimeMillis() - phaseStart;

        System.out.printf("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: %d%n", result.fileTasks.size());
        System.out.printf("–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %.2f —Å–µ–∫%n", result.scanningDuration / 1000.0);

        if (result.fileTasks.isEmpty()) {
            System.out.println("‚ö†Ô∏è –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        analyzeFileSizes(result.fileTasks);
    }

    private void executeHashingPhase(IndexingResult result) throws Exception {
        if (result.fileTasks.isEmpty()) return;

        System.out.println("\n--- –≠–¢–ê–ü 2: –í–´–ß–ò–°–õ–ï–ù–ò–ï –•–ï–®–ï–ô ---");
        long phaseStart = System.currentTimeMillis();

        ProgressTracker progressTracker = new ProgressTracker(result.fileTasks.size());

        result.processedFiles = hashCalculator.processFiles(result.fileTasks);
        result.hashingDuration = System.currentTimeMillis() - phaseStart;

        System.out.printf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d –∏–∑ %d%n",
                result.processedFiles.size(), result.fileTasks.size());
        System.out.printf("–í—Ä–µ–º—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: %.2f —Å–µ–∫%n", result.hashingDuration / 1000.0);

        calculateParallelEfficiency(result);
    }

    private void executeIndexingPhase(IndexingResult result) {
        if (result.processedFiles.isEmpty()) return;

        System.out.println("\n--- –≠–¢–ê–ü 3: –ü–û–°–¢–†–û–ï–ù–ò–ï –ò–ù–î–ï–ö–°–ê ---");
        long phaseStart = System.currentTimeMillis();

        for (FileInfo fileInfo : result.processedFiles) {
            fileIndex.addOrUpdate(fileInfo);
        }

        result.duplicateGroups = fileIndex.findDuplicates();
        result.indexStatistics = fileIndex.getStatistics();
        result.indexingDuration = System.currentTimeMillis() - phaseStart;

        System.out.printf("–§–∞–π–ª–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: %d%n", fileIndex.size());
        System.out.printf("–ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: %d%n", result.duplicateGroups.size());
        System.out.printf("–í—Ä–µ–º—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: %.2f —Å–µ–∫%n", result.indexingDuration / 1000.0);

        displayDuplicates(result.duplicateGroups);
    }

    private void analyzeFileSizes(List<FileScanner.FileTask> fileTasks) {
        long totalSize = fileTasks.stream().mapToLong(FileScanner.FileTask::getSize).sum();
        long maxSize = fileTasks.stream().mapToLong(FileScanner.FileTask::getSize).max().orElse(0);
        double avgSize = (double) totalSize / fileTasks.size();

        System.out.printf("–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤:%n");
        System.out.printf("  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: %s%n", formatBytes(totalSize));
        System.out.printf("  –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: %s%n", formatBytes((long) avgSize));
        System.out.printf("  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: %s%n", formatBytes(maxSize));

        long small = fileTasks.stream().mapToLong(t -> t.getSize() < 1024 ? 1 : 0).sum();
        long medium = fileTasks.stream().mapToLong(t -> t.getSize() >= 1024 && t.getSize() < 1024*1024 ? 1 : 0).sum();
        long large = fileTasks.stream().mapToLong(t -> t.getSize() >= 1024*1024 ? 1 : 0).sum();

        System.out.printf("  –ú–∞–ª–µ–Ω—å–∫–∏–µ (<1KB): %d —Ñ–∞–π–ª–æ–≤%n", small);
        System.out.printf("  –°—Ä–µ–¥–Ω–∏–µ (1KB-1MB): %d —Ñ–∞–π–ª–æ–≤%n", medium);
        System.out.printf("  –ë–æ–ª—å—à–∏–µ (>1MB): %d —Ñ–∞–π–ª–æ–≤%n", large);
    }

    private void calculateParallelEfficiency(IndexingResult result) {

        long estimatedSingleThreadTime = result.hashingDuration * numberOfThreads;
        double theoreticalSpeedup = (double) estimatedSingleThreadTime / result.hashingDuration;
        double efficiency = theoreticalSpeedup / numberOfThreads * 100;

        System.out.printf("–û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏:%n");
        System.out.printf("  –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: %.1fx%n", theoreticalSpeedup);
        System.out.printf("  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %.1f%%%n", efficiency);

        if (efficiency < 50) {
            System.out.println("  ‚ö†Ô∏è –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏");
        } else if (efficiency > 80) {
            System.out.println("  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏");
        }
    }

    private void displayDuplicates(List<List<FileInfo>> duplicateGroups) {
        if (duplicateGroups.isEmpty()) {
            System.out.println("–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã");
            return;
        }

        System.out.println("\n--- –ù–ê–ô–î–ï–ù–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´ ---");

        int groupsToShow = Math.min(3, duplicateGroups.size());

        for (int i = 0; i < groupsToShow; i++) {
            List<FileInfo> group = duplicateGroups.get(i);
            System.out.printf("\n–ì—Ä—É–ø–ø–∞ %d (%d —Ñ–∞–π–ª–æ–≤, %s –∫–∞–∂–¥—ã–π):%n",
                    i + 1, group.size(), formatBytes(group.get(0).getSize()));

            for (FileInfo file : group) {
                System.out.printf("  üìÑ %s%n", file.getFileName());
                System.out.printf("      %s%n", file.getPath());
            }
        }

        if (duplicateGroups.size() > groupsToShow) {
            System.out.printf("\n... –∏ –µ—â–µ %d –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤%n",
                    duplicateGroups.size() - groupsToShow);
        }
    }

    private void printFinalStatistics(IndexingResult result) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê");
        System.out.println("=".repeat(60));

        System.out.printf("–û–±—â–µ–µ –≤—Ä–µ–º—è: %.2f —Å–µ–∫%n", result.totalDuration / 1000.0);
        System.out.printf("  ‚îî‚îÄ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: %.2f —Å–µ–∫ (%.1f%%)%n",
                result.scanningDuration / 1000.0,
                100.0 * result.scanningDuration / result.totalDuration);
        System.out.printf("  ‚îî‚îÄ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: %.2f —Å–µ–∫ (%.1f%%)%n",
                result.hashingDuration / 1000.0,
                100.0 * result.hashingDuration / result.totalDuration);
        System.out.printf("  ‚îî‚îÄ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è: %.2f —Å–µ–∫ (%.1f%%)%n",
                result.indexingDuration / 1000.0,
                100.0 * result.indexingDuration / result.totalDuration);

        if (result.indexStatistics != null) {
            System.out.println("\n" + result.indexStatistics);
        }

        provideOptimizationSuggestions(result);
    }

    private void provideOptimizationSuggestions(IndexingResult result) {
        System.out.println("\n--- –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ---");

        double hashingPercentage = 100.0 * result.hashingDuration / result.totalDuration;

        if (hashingPercentage > 70) {
            System.out.println("‚Ä¢ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤");
        }

        if (result.processedFiles.size() < numberOfThreads * 10) {
            System.out.println("‚Ä¢ –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ - –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1-2 –ø–æ—Ç–æ–∫–∞");
        }

        if (result.duplicateGroups.size() > result.processedFiles.size() * 0.1) {
            System.out.println("‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∏–ª–∏ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤");
        }

        System.out.printf("‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.1f —Ñ–∞–π–ª–æ–≤/—Å–µ–∫%n",
                result.processedFiles.size() * 1000.0 / result.totalDuration);
    }

    private static class ProgressTracker {
        private final int total;
        private final AtomicInteger completed = new AtomicInteger(0);
        private long lastUpdateTime = System.currentTimeMillis();

        public ProgressTracker(int total) {
            this.total = total;
        }

        public void increment() {
            int current = completed.incrementAndGet();
            long now = System.currentTimeMillis();

            if (now - lastUpdateTime > 2000 || current % Math.max(1, total / 4) == 0) {
                double percentage = (100.0 * current) / total;
                System.out.printf("–ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f%% (%d/%d)%n", percentage, current, total);
                lastUpdateTime = now;
            }
        }
    }

    private String formatBytes(long bytes) {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1024 * 1024) return String.format("%.1f KB", bytes / 1024.0);
        if (bytes < 1024 * 1024 * 1024) return String.format("%.1f MB", bytes / (1024.0 * 1024));
        return String.format("%.1f GB", bytes / (1024.0 * 1024 * 1024));
    }

    public static class IndexingResult {

        public List<FileScanner.FileTask> fileTasks;
        public List<FileInfo> processedFiles;
        public List<List<FileInfo>> duplicateGroups;
        public SimpleFileIndex.IndexStatistics indexStatistics;

        public long scanningDuration;
        public long hashingDuration;
        public long indexingDuration;
        public long totalDuration;

        public int getProcessedCount() {
            return processedFiles != null ? processedFiles.size() : 0;
        }

        public int getDuplicateGroupsCount() {
            return duplicateGroups != null ? duplicateGroups.size() : 0;
        }

        public double getOverallPerformance() {
            return totalDuration > 0 ? getProcessedCount() * 1000.0 / totalDuration : 0;
        }
    }
}
